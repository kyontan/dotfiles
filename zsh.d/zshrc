source ~/zsh.d/zshenv

bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey "^[[3~" delete-char

bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line

precmd () {print -Pn "\e]2; %~/ \a"}
preexec () {print -Pn "\e]2; %~/ \a"}

# disable XON/XOFF flow control
# (Prevent stopping terminal when sending C-s)
stty -ixon

# prompt
#autoload -U colors
#colors
PROMPT='%n@%m # '
# RPROMPT='[%d]'
RPROMPT=''

# completion
autoload -U compinit
compinit
setopt correct
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
setopt COMBINING_CHARS

zstyle ':completion:*:default' menu select=2

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups
setopt share_history
setopt auto_pushd
setopt pushd_ignore_dups

setopt auto_cd
setopt list_packed

# alias
alias ll='ls -lF'
alias la='ls -A'
alias l='ls -CF'
# alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vi='vim'

# alias tsp='tmux new-session \; split-window -h -d'
# alias tvsp='tmux new-session \; split-window -d'

# ------------------------------------------------------------------

alias cc='/usr/bin/cc'

alias nano='nano -k -w -i -S -T 2'

# alias huba="hub add -A && hub status"
# alias hubs="hub status"
# alias hubc="hub commit"
# alias hubp="hub push origin master"
# alias hubg="hub push gitlab master"
# alias hubl="hub log --oneline"

alias javac='javac -J-Dfile.encoding=UTF-8'
alias jar='jar -J-Dfile.encoding=UTF-8'

alias cdc="cd ~/Code"
alias cdd="cd ~/Downloads"
alias cds="cd ~/Documents/School"
alias cdg="cd ~/go/src"

alias p="peco"

alias be="bundle exec"
alias bss="browser-sync start --server"
alias bsc="browser-sync start --server --config bs-config.js"

# Fix for tmux
# brew install reattach-to-user-namespace
alias subl='reattach-to-user-namespace subl'
alias open='reattach-to-user-namespace open'
alias vim='reattach-to-user-namespace vim'
alias pbcopy='reattach-to-user-namespace pbcopy'

# colordiff
if [[ -x `which colordiff` ]]; then
  alias diff='colordiff -u'
else
  alias diff='diff -u'
fi

source ~/.profile

if which peco &> /dev/null; then
  function peco-directories() {
    if command -v fd >/dev/null 2>&1; then
      local dir="$(command fd --type directory --hidden --no-ignore --exclude .git/ --color never | peco )"
    else
      local dir="$(
        command find . \( -path '*/\.*' -o -fstype dev -o -fstype proc \) -type d -print 2> /dev/null \
        | sed 1d \
        | cut -b3- \
        | awk '{a[length($0)" "NR]=$0}END{PROCINFO["sorted_in"]="@ind_num_asc"; for(i in a) print a[i]}' - \
        | peco
      )"
    fi

    if [ -n "$dir" ]; then
      dir=$(echo "$dir" | tr '\n' ' ') # | sed -e 's/[[:space:]]*$//')

      local rbuf=$RBUFFER
      BUFFER="${LBUFFER}${dir}"
      CURSOR=$#BUFFER
      BUFFER="${BUFFER}${rbuf}"
    fi
  }

  function peco-files() {
    if command -v fd >/dev/null 2>&1; then
      local file="$(command fd --type file --hidden --no-ignore --exclude .git/ --color never | peco)"
    elif command -v rg >/dev/null 2>&1; then
      local file="$(rg --glob "" --files --hidden --no-ignore-vcs --iglob !.git/ --color never | peco)"
    else
      local file="$(
      command find . \( -path '*/\.*' -o -fstype dev -o -fstype proc \) -type f -print 2> /dev/null \
        | sed 1d \
        | cut -b3- \
        | awk '{a[length($0)" "NR]=$0}END{PROCINFO["sorted_in"]="@ind_num_asc"; for(i in a) print a[i]}' - \
        | peco
      )"
    fi

    if [ -n "$file" ]; then
      file=$(echo "$file" | tr '\n' ' ') # | sed -e 's/[[:space:]]*$//')
      local rbuf=$RBUFFER
      BUFFER="${LBUFFER}${file}"
      CURSOR=$#BUFFER
      BUFFER="${BUFFER}${rbuf}"
    fi
  }

  zle -N peco-directories
  bindkey '^f^d' peco-directories
  zle -N peco-files
  bindkey '^f^f' peco-files

  function peco-gopath-dir() {
    local gosrc=${GOPATH:-$HOME/go}/src
    if command -v fd >/dev/null 2>&1; then
      local dir="$(command fd . --type directory --max-depth 3 --hidden --no-ignore --exclude .git/ --color never ${gosrc} | peco --initial-filter SmartCase)"
    # elif command -v rg >/dev/null 2>&1; then
    #   local file="$(rg --glob "" --files --hidden --no-ignore-vcs --iglob !.git/ --color never | peco)"
    else
      local dir="$(command find ${gosrc} -depth 3 -type d | peco --initial-filter SmartCase)"
    fi

    if [ -n "$dir" ]; then
      dir=$(echo "$dir" | awk '{ print $1 }' | tr -d '\n' ) # take first one
      pushd -q $dir
    fi
  }
  zle -N peco-gopath-dir
  bindkey '^f^g' peco-gopath-dir

  function peco-git-checkout() {
    if git rev-parse 2> /dev/null; then
      git branch | grep -v -e '->' -e '*' | perl -pe 's/^\h+//g' | perl -pe 's#^remotes/origin/###' | perl -nle 'print if !$c{$_}++' | peco | xargs git checkout
    fi
  }

  zle -N peco-git-checkout
  bindkey '^f^b' peco-git-checkout

  # Search shell history with peco: https://github.com/peco/peco
  # Adapted from: https://github.com/mooz/percol#zsh-history-search
  function peco_select_history() {
    BUFFER=$(fc -l -n 1 | sort -r | uniq | peco --query "$LBUFFER")
    CURSOR=$#BUFFER # move cursor
    zle -R -c       # refresh
  }

  zle -N peco_select_history
  bindkey '^R' peco_select_history
fi

